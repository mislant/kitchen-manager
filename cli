#!/usr/bin/env bash
# This script was generated by bashly 1.0.0 (https://bashly.dannyb.co)
# Modifying it manually is not recommended

# :wrapper.bash3_bouncer
if [[ "${BASH_VERSINFO:-0}" -lt 4 ]]; then
  printf "bash version 4 or higher is required\n" >&2
  exit 1
fi

# :command.master_script

# :command.version_command
version_command() {
  echo "$version"
}

# :command.usage
cli_usage() {
  if [[ -n $long_usage ]]; then
    printf "cli - Cli interface to interact with kitchen manager application\n"
    echo

  else
    printf "cli - Cli interface to interact with kitchen manager application\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  cli COMMAND\n"
  printf "  cli [COMMAND] --help | -h\n"
  printf "  cli --version | -v\n"
  echo
  # :command.usage_commands
  printf "%s\n" "Commands:"
  printf "  %s   Environment variable configuration tool\n" "env"
  printf "  %s   Application management tool\n" "app"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo
    printf "  %s\n" "--version, -v"
    printf "    Show version number\n"
    echo

  fi
}

# :command.usage
cli_env_usage() {
  if [[ -n $long_usage ]]; then
    printf "cli env - Environment variable configuration tool\n"
    echo

  else
    printf "cli env - Environment variable configuration tool\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  cli env COMMAND\n"
  printf "  cli env [COMMAND] --help | -h\n"
  echo
  # :command.usage_commands
  printf "%s\n" "Commands:"
  printf "  %s   Initializes .env files\n" "init                          "
  printf "  %s   Generates cookie validation key for frontend application. Result is placed in .env file in root directory\n" "generate-cookie-validation-key"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
cli_env_init_usage() {
  if [[ -n $long_usage ]]; then
    printf "cli env init - Initializes .env files\n"
    echo

  else
    printf "cli env init - Initializes .env files\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  cli env init [OPTIONS]\n"
  printf "  cli env init --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_flags
    # :flag.usage
    printf "  %s\n" "--where, -w PLACE"
    printf "    Which place create .env file. Default 'all' means initialize all .env files\n"
    printf "    Allowed: all, root, docker\n"
    printf "    Default: all\n"
    echo

    # :flag.usage
    printf "  %s\n" "--env, -e ENV"
    printf "    For what environment initialize default variables\n"
    printf "    Allowed: dev, prod\n"
    printf "    Default: dev\n"
    echo

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
cli_env_generate_cookie_validation_key_usage() {
  if [[ -n $long_usage ]]; then
    printf "cli env generate-cookie-validation-key - Generates cookie validation key for frontend application. Result is placed in .env file in root directory\n"
    echo

  else
    printf "cli env generate-cookie-validation-key - Generates cookie validation key for frontend application. Result is placed in .env file in root directory\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  cli env generate-cookie-validation-key\n"
  printf "  cli env generate-cookie-validation-key --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
cli_app_usage() {
  if [[ -n $long_usage ]]; then
    printf "cli app - Application management tool\n"
    echo

  else
    printf "cli app - Application management tool\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  cli app COMMAND\n"
  printf "  cli app [COMMAND] --help | -h\n"
  echo
  # :command.usage_commands
  printf "%s\n" "Commands:"
  printf "  %s   Starts application server\n" "start"
  printf "  %s   Stops application service\n" "stop "
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
cli_app_start_usage() {
  if [[ -n $long_usage ]]; then
    printf "cli app start - Starts application server\n"
    echo

  else
    printf "cli app start - Starts application server\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  cli app start [OPTIONS]\n"
  printf "  cli app start --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_flags
    # :flag.usage
    printf "  %s\n" "--rebuild, -b"
    printf "    Rebuilds container images before start\n"
    echo

    # :flag.usage
    printf "  %s\n" "--show-config, -C"
    printf "    Shows docker-compose configuration of application\n"
    echo

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
cli_app_stop_usage() {
  if [[ -n $long_usage ]]; then
    printf "cli app stop - Stops application service\n"
    echo

  else
    printf "cli app stop - Stops application service\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  cli app stop\n"
  printf "  cli app stop --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.normalize_input
normalize_input() {
  local arg flags

  while [[ $# -gt 0 ]]; do
    arg="$1"
    if [[ $arg =~ ^(--[a-zA-Z0-9_\-]+)=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^(-[a-zA-Z0-9])=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^-([a-zA-Z0-9][a-zA-Z0-9]+)$ ]]; then
      flags="${BASH_REMATCH[1]}"
      for ((i = 0; i < ${#flags}; i++)); do
        input+=("-${flags:i:1}")
      done
    else
      input+=("$arg")
    fi

    shift
  done
}
# :command.inspect_args
inspect_args() {
  readarray -t sorted_keys < <(printf '%s\n' "${!args[@]}" | sort)
  if ((${#args[@]})); then
    echo args:
    for k in "${sorted_keys[@]}"; do echo "- \${args[$k]} = ${args[$k]}"; done
  else
    echo args: none
  fi

  if ((${#other_args[@]})); then
    echo
    echo other_args:
    echo "- \${other_args[*]} = ${other_args[*]}"
    for i in "${!other_args[@]}"; do
      echo "- \${other_args[$i]} = ${other_args[$i]}"
    done
  fi
}

# :command.user_lib
# bin/lib/help_functions.sh
generate_cookie_validation_key() {
  local cookie_validation_key

  cookie_validation_key=$(echo $RANDOM | md5sum | head -c 20)
  echo "Generate cookie validation key: $cookie_validation_key"
  sed -i "s/COOKIE_VALIDATION_KEY=/&$cookie_validation_key/" "$root_dir/.env"
}

ensure_env() {
  local dir

  dir=$1
  if [ ! -f "$dir/.env" ]; then
    echo "There is no environment file in $dir. Use 'env init' first!"
    exit 1
  fi
}

export_env() {
  local dir

  dir=$1
  while read -r line; do
    # Игнорируем пустые строки и комментарии
    if [[ "$line" == "" || "$line" == \#* ]]; then
      continue
    fi

    # Извлекаем имя переменной и значение из строки
    var_name=$(echo "$line" | cut -d'=' -f1)
    var_value=$(echo "$line" | cut -d'=' -f2-)

    # Экспортируем переменную в текущую сессию оболочки
    export "$var_name"="$var_value"
  done <"$dir/.env"
}

# :command.command_functions

# :command.function
cli_env_init_command() {
  # bin/env_init_command.sh
  where=${args[--where]}
  env=${args[--env]}

  function init_docker() {
    echo "Docker .env file initialization"
    docker_dir="$root_dir/.docker"
    cp "$docker_dir/.env.example" "$docker_dir/.env"

    function fill_dev_values() {
      echo "Added $USER as USER variable"
      sed -i "s/USER=/&$USER/" .docker/.env
      echo "Added $(id -u "$USER") as USER_ID variable"
      sed -i "s/USER_ID=/&$(id -u "$USER")/" .docker/.env
      echo "Added $(id -g "$USER") as USER_GID variable"
      sed -i "s/USER_GID=/&$(id -g "$USER")/" .docker/.env
      echo "Set compose to work with dev overriding"
      sed -i "s/COMPOSE_FILE=/&docker-compose.yaml:docker-compose.dev.yaml/" "$docker_dir/.env"
    }

    function fill_prod_values() {
      echo "Set compose to work with prod overriding"
      sed -i "s/COMPOSE_FILE=/&docker-compose.yaml:docker-compose.prod.yaml/" "$docker_dir/.env"
    }

    case $env in
    "dev")
      fill_dev_values
      ;;
    "prod")
      fill_prod_values
      ;;
    esac
  }

  function init_root() {
    echo "Root .env file initialization"
    cp "$root_dir/.env.example" "$root_dir/.env"

    generate_cookie_validation_key
  }

  function init_all() {
    init_docker
    init_root
  }

  case "$where" in
  "all")
    init_all
    ;;
  "root")
    init_root
    ;;
  "docker")
    init_docker
    ;;
  esac

}

# :command.function
cli_env_generate_cookie_validation_key_command() {
  # bin/env_generate_cookie_validation_key_command.sh
  ensure_env "$root_dir"
  generate_cookie_validation_key

}

# :command.function
cli_app_start_command() {
  # bin/app_start_command.sh
  docker_dir="$root_dir/.docker"
  ensure_env "$docker_dir"
  export_env "$docker_dir"

  just_config=${args["--show-config"]}
  if [ "$just_config" == "1" ]; then
    docker compose config
    exit
  fi

  if [ -n "$(docker compose ps -q)" ]; then
    echo "Down running containers"
    docker compose down
  fi

  rebuild=${args["--rebuild"]}
  if [ "$rebuild" == "1" ]; then
    echo "Rebuild images"
    docker compose build
  fi

  echo "Starting application"
  docker compose up -d
  echo "Application started"

}

# :command.function
cli_app_stop_command() {
  # bin/app_stop_command.sh
  docker_dir="$root_dir/.docker"
  ensure_env "$docker_dir"
  export_env "$docker_dir"

  docker compose down

}

# :command.parse_requirements
parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --version | -v)
        version_command
        exit
        ;;

      --help | -h)
        long_usage=yes
        cli_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action=${1:-}

  case $action in
    -*) ;;

    env)
      action="env"
      shift
      cli_env_parse_requirements "$@"
      shift $#
      ;;

    app)
      action="app"
      shift
      cli_app_parse_requirements "$@"
      shift $#
      ;;

    # :command.command_fallback
    "")
      cli_usage >&2
      exit 1
      ;;

    *)
      printf "invalid command: %s\n" "$action" >&2
      exit 1
      ;;

  esac

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
cli_env_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        cli_env_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action=${1:-}

  case $action in
    -*) ;;

    init)
      action="init"
      shift
      cli_env_init_parse_requirements "$@"
      shift $#
      ;;

    generate-cookie-validation-key)
      action="generate-cookie-validation-key"
      shift
      cli_env_generate_cookie_validation_key_parse_requirements "$@"
      shift $#
      ;;

    # :command.command_fallback
    "")
      cli_env_usage >&2
      exit 1
      ;;

    *)
      printf "invalid command: %s\n" "$action" >&2
      exit 1
      ;;

  esac

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
cli_env_init_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        cli_env_init_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="env init"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      # :flag.case
      --where | -w)

        # :flag.case_arg
        if [[ -n ${2+x} ]]; then

          args['--where']="$2"
          shift
          shift
        else
          printf "%s\n" "--where requires an argument: --where, -w PLACE" >&2
          exit 1
        fi
        ;;

      # :flag.case
      --env | -e)

        # :flag.case_arg
        if [[ -n ${2+x} ]]; then

          args['--env']="$2"
          shift
          shift
        else
          printf "%s\n" "--env requires an argument: --env, -e ENV" >&2
          exit 1
        fi
        ;;

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

  # :command.default_assignments
  [[ -n ${args['--where']:-} ]] || args['--where']="all"
  [[ -n ${args['--env']:-} ]] || args['--env']="dev"

  # :command.whitelist_filter
  if [[ ! ${args['--where']} =~ ^(all|root|docker)$ ]]; then
    printf "%s\n" "--where must be one of: all, root, docker" >&2
    exit 1
  fi
  if [[ ! ${args['--env']} =~ ^(dev|prod)$ ]]; then
    printf "%s\n" "--env must be one of: dev, prod" >&2
    exit 1
  fi

}

# :command.parse_requirements
cli_env_generate_cookie_validation_key_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        cli_env_generate_cookie_validation_key_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="env generate-cookie-validation-key"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
cli_app_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        cli_app_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action=${1:-}

  case $action in
    -*) ;;

    start)
      action="start"
      shift
      cli_app_start_parse_requirements "$@"
      shift $#
      ;;

    stop)
      action="stop"
      shift
      cli_app_stop_parse_requirements "$@"
      shift $#
      ;;

    # :command.command_fallback
    "")
      cli_app_usage >&2
      exit 1
      ;;

    *)
      printf "invalid command: %s\n" "$action" >&2
      exit 1
      ;;

  esac

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
cli_app_start_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        cli_app_start_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="app start"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      # :flag.case
      --rebuild | -b)

        # :flag.case_no_arg
        args['--rebuild']=1
        shift
        ;;

      # :flag.case
      --show-config | -C)

        # :flag.case_no_arg
        args['--show-config']=1
        shift
        ;;

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
cli_app_stop_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        cli_app_stop_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="app stop"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.initialize
initialize() {
  version="master"
  long_usage=''
  set -e

  # bin/initialize.sh
  root_dir=$(cd "$(dirname "$0")" && pwd)

}

# :command.run
run() {
  declare -A args=()
  declare -a other_args=()
  declare -a input=()
  normalize_input "$@"
  parse_requirements "${input[@]}"

  case "$action" in
    "env")
      if [[ ${args['--help']:-} ]]; then
        long_usage=yes
        cli_env_usage
      else
        cli_env_command
      fi
      ;;

    "env init")
      if [[ ${args['--help']:-} ]]; then
        long_usage=yes
        cli_env_init_usage
      else
        cli_env_init_command
      fi
      ;;

    "env generate-cookie-validation-key")
      if [[ ${args['--help']:-} ]]; then
        long_usage=yes
        cli_env_generate_cookie_validation_key_usage
      else
        cli_env_generate_cookie_validation_key_command
      fi
      ;;

    "app")
      if [[ ${args['--help']:-} ]]; then
        long_usage=yes
        cli_app_usage
      else
        cli_app_command
      fi
      ;;

    "app start")
      if [[ ${args['--help']:-} ]]; then
        long_usage=yes
        cli_app_start_usage
      else
        cli_app_start_command
      fi
      ;;

    "app stop")
      if [[ ${args['--help']:-} ]]; then
        long_usage=yes
        cli_app_stop_usage
      else
        cli_app_stop_command
      fi
      ;;

  esac
}

initialize
run "$@"
